// Checking the status of the waveform and time vector size
    bool checkNextEvent = true;
    for( std::size_t b = 0, max_b = this->channel.size(); b < max_b; b++ )
    {
      if( this->skipBadVector )
      {
        while( (this->voltageReader[b]->GetSize() != 2001) || (this->timeReader[b]->GetSize() != 2001) )
        {
          std::cout << "Skip ill vector in On, found ill vector at " << fill << "with size " << this->voltageReader[b]->GetSize() <<", skipping whole event..." << std::endl;
          this->treeReader->Next();
          fill++;
        }
      }

      if( (this->voltageReader[b]->GetSize() < 1000) || (this->timeReader[b]->GetSize() == 0) || (this->voltageReader[b]->GetSize() == 0) || (this->voltageReader[b]->GetSize() != this->timeReader[b]->GetSize()) )
      {
        while( this->voltageReader[b]->GetSize() == 0 )
        {
          std::cout << "Voltage Reader is empty at event " << fill << ", skipping whole event..." << std::endl;
          checkNextEvent = this->treeReader->Next();
          fill++;
          if(!checkNextEvent)return 1;
        }
        while( this->timeReader[b]->GetSize() == 0 )
        {
          std::cout << "Time Reader is empty at event " << fill << ", skipping whole event..." << std::endl;
          checkNextEvent = this->treeReader->Next();
          fill++;
          if(!checkNextEvent)return 1;
        }
        while( ( (this->voltageReader[b]->GetSize() != this->timeReader[b]->GetSize()) ) )
        {
          std::cout << "Voltage Reader and Time Reader have different array size at event " << fill << ", skipping whole event..." << std::endl;
          checkNextEvent = this->treeReader->Next();
          fill++;
          if(!checkNextEvent)return 1;
        }
        while( this->voltageReader[b]->GetSize() < 1000 )
        {
          std::cout << "Voltage Reader less than 1000 at event " << fill << ", skipping whole event..." << std::endl;
          checkNextEvent = this->treeReader->Next();
          fill++;
          if(!checkNextEvent)return 1;
        }
      }
    }
